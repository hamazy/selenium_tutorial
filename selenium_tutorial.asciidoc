Selenium チュートリアル
=======================
:doctype: article
:toc:
:icons:
:encoding: UTF-8
:lang: ja

このチュートリアルは、 http://www.seleniumhq.org/[Selenium]
の最も基本的な機能を、素早く一通り試してみることを目的としています。

Mac OS で操作した結果を元に記述していますが、Linux や Windows
でも同様に操作することができます。

Selenium IDE
------------

Selenium IDE のインストール
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Selenium IDE は Firefox のアドオンとして提供されているため、Firefox がインストールされていることが前提となります。
Firefox が未インストールの場合は、 http://mozilla.jp/firefox/[Mozilla のWebサイト] からダウンロードしてインストールします。

Firefox を起動し、 http://seleniumhq.org/download/ から Selenium IDE の最新バージョン
footnote:[執筆時点での Selenium IDE の最新バージョンは 1.1.0 です。] へのリンクをクリックします。

image:images/selenium_ide_download.png["Selenium のダウンロードページ",height=420]

アドオンのインストールを許可するかどうか尋ねられます。Allow をクリックして許可します。

image:images/firefox_allow_install.png[""]

ダウンロード完了後、 Install Now をクリックします。

image:images/firefox_install_addons.png[""]

Firefox 再起動をすると、アドオンが有効になります。

image:images/firefox_restart_needed.png[]

ブラウザーの操作を記録する
~~~~~~~~~~~~~~~~~~~~~~~~~~

`Tools` &raquo; `Selenium IDE` メニューを選択して、Selenium IDE のウィンドウを開きます。

image:images/selenium_ide_window.png["",height=420]

Selenium IDE が記録モード image:images/selenium_ide_recording.png[] になっていることを確認し、
Firefox で以下の操作をします。

. アドレスバーに http://www.google.co.jp を入力し、ページへアクセスする。
. 入力フィールドに 「株式会社エス・スリー・フォー」を入力し、Enter キーを押下する。
. 検索結果から「株式会社エス・スリー・フォー」のリンクをクリックする。

image:images/firefox_google_top.png["",height=360]

image:images/firefox_google_searching.png["",height=360]

上記の操作が、Selenium IDE ウィンドウに記録されていることを確認します。

image:images/selenium_ide_recorded.png["",height=420]

記録ボタン image:images/selenium_ide_recording.png[] をクリックして、記録モードをオフにします。

テストケースを保存する
~~~~~~~~~~~~~~~~~~~~~~

記録した操作は、テストケースとしてファイルに保存することができます。

`File` &raquo; `Save Test Case` メニューを選択して、 SearchOnGoogelTestCase.html として保存します。
footnote:[Selenium IDE のテストケースは、特殊な形式に従った HTML文書としてファイルに保存されます。]

image:images/selenium_ide_save_testcase.png[""]

テストケースを実行する
~~~~~~~~~~~~~~~~~~~~~~

保存したテストケースを様々な方法で実行してみます。

任意のコマンドを実行する
^^^^^^^^^^^^^^^^^^^^^^^^

Selenium IDE ウィンドウの Table タブには、テストケースとして記録した操作が表形式で表示されています。
これらの操作は、任意のものを選択して、個別に実行することができます。
footnote:[ただし、それぞれの操作はブラウザーの表示内容に依存するものが多くあります。
そのため、順番に実行しなければ上手く実行できないことがあります。]

表の中から1番上の行の `open /` を選択し、その状態で `Actions` &raquo; `Execute this command` メニューを選択します。
footnote:[右クリックメニューで選択したり、行の上でのダブルクリックや、xキーを押下するというショートカットも用意されています。]

同様に、表中の行を順番に選択し、実行していきます。

テストケースごとに実行する
^^^^^^^^^^^^^^^^^^^^^^^^^^

`Actions` &raquo; `Play current test case` メニューを選択して、テストケースを実行します。

テストケースの内容に従って、ブラウザーが動作するのを確認します。

[NOTE]
=====================================================================
上で記録したテストケースを実行すると、最後の `clickAndWait css=em` のところでテストが失敗します。
<<sele-ide-edit-testcase>> で、この点を修正します。
=====================================================================

ステップ実行する
^^^^^^^^^^^^^^^^

あるコマンドにブレイクポイントを設定しておき、テストケースの実行をそのコマンドで中断してから、ステップ実行することもできます。

`type id=lst-ib 株式会社エス・スリー・フォー` の行を選択した状態で、 `Actions` &raquo; `Toggle Breakpoint` メニューを選択します。

下図のように、ブレイクポイントがセットされます。

image:images/selenium_ide_break_point.png[""]

ブレイクポイントのアイコンがついた状態で、`Actions` &raquo; `Play current test case` メニューを選択し、テストケースを実行します。

下図のように、ブレークポイントで実行が中断します。

image:images/selenium_ide_paused.png[""]

ブレイクポイントで実行が中断したことを確認し、ステップ実行ボタン
image:images/selenium_ide_step.png[""] をクリックして、残りのコマンドを順に実行していきます。

[[sele-ide-edit-testcase]]
テストケースを編集する
~~~~~~~~~~~~~~~~~~~~~~

コマンドを追加する
^^^^^^^^^^^^^^^^^^

`clickAndWait css=em` の行を選択し、その状態で `Edit` &raquo; `Insert New Command` メニューを選択します。

新しいコマンドに、下表のように値を入力します。

[options="header",width="50%"]
|=============================
|項目   |値
|Command|waitForElementPresent
|Target |css=em
|Value  |
|=============================

コマンドを編集する
^^^^^^^^^^^^^^^^^^

TODO

[[export_test_code]]
テストケースからテストコードを出力する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`File` &raquo; `Export Test Case As...` &raquo; `JUnit4 (WebDriver)`
メニューを選択し、 `SearchOnGoogleWDTestCase.java` として保存します。

同様に、`File` &raquo; `Export Test Case As...` &raquo;
`JUnit4 (Remote Control)` メニューを選択し、
`SearchOnGoogleRCTestCase.java` として保存します。

Selenium 2.0 (WebDriver)
------------------------

ここでは、http://maven.apache.org/[Apache Maven] と http://www.eclipse.org/[Eclipse] を用いて、
Selenium 2.0 のテストを作成します。Maven と Eclipse は既にインストールされているものとします。

[[webdriver-create-project]]
プロジェクトの作成
~~~~~~~~~~~~~~~~~~

ターミナルから下記を実行します。

--------------------
$ mvn archetype:generate \
> -DarchetypeArtifactId=maven-archetype-quickstart \
> -DarchetypeGroupId=org.apache.maven.archetypes \
> -DgroupId=jp.co.s34.selenium \
> -DartifactId=webdriver-tut -DinteractiveMode=false
--------------------

実行したディレクトリーに `webdriver-tut` というディレクトリーが生成されます。

`webdriver-tut/pom.xml` を任意のエディターで以下のように編集します。

[[webdriver-pom-xml-modification]]
.webdriver-tut/pom.xml の修正内容
[source,xml]
--------------------
<project ...>
...
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.2</version>                   <1>
      <scope>test</scope>
    </dependency>
    <dependency>                                 <2>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>2.3.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
--------------------

<1> `junit` のバージョン番号を 4.8.2 に変更します。
<2> `selenium-java` への依存性について定義する `<dependency>` を追加します。

下記のように、`webdriver-tut` ディレクトリーに移動して、`mvn install` を実行します。

--------------------
$ cd webdriver-tut
$ mvn install
--------------------

これで、必要な JARファイルが、実行したマシン上にある Maven のローカルリポジトリにインストールされました。

Eclipse のワークスペースから Maven ローカルリポジトリを参照できるようにするため、下記のように実行します。
下記は、Eclipse のワークスペースが `$HOME/Documents/selenium-tutorial` にある場合の例です。実際の環境に合わせて実行して下さい。

--------------------
$ mvn eclipse:add-maven-repo -Declipse.workspace=$HOME/Documents/selenium-tutorial
--------------------

[NOTE]
====================
`mvn eclipse:add-maven-repo` は、ワークスペースに対して1回実行すれば十分です。プロジェクトを作成するたびに実行する必要はありません。
====================

以下を実行し、Eclipse プロジェクトに必要なファイル (`.classpath`, `.project`) を生成します。

--------------------
$ mvn eclipse:eclipse
--------------------

上のコマンドを実行すると、`webdriver-tut` ディレクトリー配下に `.classpath`, `.project` が出来ていることを確認して下さい。

Eclipseを起動し、ワークスペースを開きます。さらに、ワークベンチを開きます。

image:images/eclipse_workbench_initial.png["",height=420]

Eclipse のメニューから、`File` &raquo; `Import` メニューで、`Existing Projects into Workspace` を選択し `Next` をクリックします。

image:images/eclipse_import_select.png["",height=420]

mvn コマンドで出来た `webdriver-tut` ディレクトリーを指定し、`Finish` をクリックします。

image:images/eclipse_import_project.png["",height=420]

`Package Explorer` に `webdriver-tut` プロジェクトが出来ていることを確認して下さい。

image:images/eclipse_project_imported.png["",height=420]

[[webdriver-create-test]]
テストコードの作成
~~~~~~~~~~~~~~~~~~

<<export_test_code>> でエクスポートしたテストコードをインポートし、それに編集を加えてテストコードを作成します。

まず、<<export_test_code>> でエクスポートした `SearchOnGoogleWDTestCase.java` を、
`Pacage Explorer` の `webdriver-tut` &raquo; `src/test/java` &raquo; `jp.co.s34.selenium`
上にドラッグ&amp;ドロップします。

image:images/eclipse_selenium_package.png["",height=420]

以下のダイアログが表示され、ファイルをコピーするかリンクを作るか尋ねられますが、デフォルトの `Copy files`のまま `OK` をクリックします。

image:images/eclipse_file_operation.png[""]

`SearchOnGoogleWDTestCase.java` をダブルクリックして、エディターで開きます。

image:images/eclipse_testcase_opened.png["",height=420]

インポートした `SearchOnGoogleWDTestCase.java` は、そのままではコンパイルが通らないなど、修正すべき点がいくつかあります。

* パッケージ名が正しくない
* `String` 型変数 `baseUrl` の値が空になっている
* アクセスする Webページの URI が正しくない
* 使用しないクラスがインポートされている

以降、これらを修正します。

パッケージ名の修正
^^^^^^^^^^^^^^^^^^

コンパイルエラーが発生しているのは、パッケージ名を定義している以下の箇所です。

------------------------------
package com.example.tests;
------------------------------

クイックフィックスアイコン
image:images/eclipse_quick_fix.png[""] をクリックし、
`Change package declaration to jp.co.s34.selenium` を選択します。

`baseUrl` の修正
^^^^^^^^^^^^^^^^

[source,java]
.修正前
--------------------
...
public class SearchOnGoogleWDTestCase {
	private WebDriver driver;
	private String baseUrl="";                        /* <1> */
...
--------------------

<1> baseUrl が空文字で初期化されています。

[source,java]
.修正後
--------------------
...
public class SearchOnGoogleWDTestCase {
	private WebDriver driver;
	private String baseUrl="http://www.google.co.jp"; /* <1> */
...
--------------------

<1> baseUrl を `http://www.google.co.jp` で初期化します。

アクセス先の URI の修正
^^^^^^^^^^^^^^^^^^^^^^^

[source,java]
.修正前
--------------------
...
	@Test
	public void testSearchOnGoogleWDTestCase() throws Exception {
		driver.get("/");              /* <1> */
...
--------------------

<1> アクセス先 URI の値が不正です。

[source,java]
.修正後
--------------------
...
	@Test
	public void testSearchOnGoogleWDTestCase() throws Exception {
		driver.get(baseUrl + "/");    /* <1> */
...
--------------------

<1> `baseUrl` と連結して、アクセス先 URI を正しい値にします。

インポートするクラスの整理
^^^^^^^^^^^^^^^^^^^^^^^^^^

`Source` &raquo; `Organize Imports` メニューを選択します。

以上を修正すると、`SearchOnGoogleWDTestCase.java` は下のようになります。

[source,java]
.`SearchOnGoogleWDTestCase.java`
--------------------
package jp.co.s34.selenium;

import static org.junit.Assert.fail;

import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class SearchOnGoogleWDTestCase {
	private WebDriver driver;
	private String baseUrl="http://www.google.co.jp";
	private StringBuffer verificationErrors = new StringBuffer();
	@Before
	public void setUp() throws Exception {
		driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	@Test
	public void testSearchOnGoogleTestCase() throws Exception {
		driver.get(baseUrl + "/");
		driver.findElement(By.id("lst-ib")).clear();
		driver.findElement(By.id("lst-ib")).sendKeys("株式会社エス・スリー・フォー");
		for (int second = 0;; second++) {
			if (second >= 60) fail("timeout");
			try { if (isElementPresent(By.cssSelector("em"))) break; } catch (Exception e) {}
			Thread.sleep(1000);
		}

		driver.findElement(By.cssSelector("em")).click();
	}

	@After
	public void tearDown() throws Exception {
		driver.quit();
		String verificationErrorString = verificationErrors.toString();
		if (!"".equals(verificationErrorString)) {
			fail(verificationErrorString);
		}
	}

	private boolean isElementPresent(By by) {
		try {
			driver.findElement(by);
			return true;
		} catch (NoSuchElementException e) {
			return false;
		}
	}
}
--------------------

`File` &raquo; `Save` メニューを選択して、`SearchOnGoogleWDTestCase.java` の変更を保存します。

テストコードの実行
~~~~~~~~~~~~~~~~~~

`Package Explorer` の `webdriver-tut` &raquo; `src/test/java` &raquo;
`jp.co.s34.selenium` &raquo; `SearchOnGoogleWDTestCase.java` 上で右クリックし、
`Run As...` &raquo; `JUnit Test` メニューを選択します。

Firefox が起動し、テストが自動的に実行されることを確認します。

また、Eclipse では JUnitビューが開かれ、以下のようにテスト結果が表示されます。

image:images/eclipse_junit_view.png["",height=420]


[[selenium-rc]]
Selenium 1.0 (Remote Control)
-----------------------------

プロジェクトの作成
~~~~~~~~~~~~~~~~~~

プロジェクト作成の手順は、<<webdriver-create-project>> のものと同様の流れです。

ターミナルから下記を実行します。

--------------------
$ mvn archetype:generate \
> -DarchetypeArtifactId=maven-archetype-quickstart \
> -DarchetypeGroupId=org.apache.maven.archetypes \
> -DgroupId=jp.co.s34.selenium \
> -DartifactId=selenium-rc-tut -DinteractiveMode=false
--------------------

実行したディレクトリーに `selenium-rc-tut` というディレクトリーが生成されます。

`selenium-rc-tut/pom.xml` を任意のエディターで以下のように編集します。

[[selenium-rc-pom-xml-modification]]
.selenium-rc-tut/pom.xml の修正内容
[source,xml]
--------------------
<project ...>
...
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.2</version>                   <1>
      <scope>test</scope>
    </dependency>
    <dependency>                                 <2>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>2.3.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>                                 <3>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-server</artifactId>
      <version>2.3.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
--------------------

<1> `junit` のバージョン番号を 4.8.2 に変更します。
<2> `selenium-java` への依存性について定義する `<dependency>` を追加します。
<3> `selenium-server` への依存性について定義する `<dependency>` を追加します。

下記のように、`selenium-rc-tut` ディレクトリーに移動して、`mvn install` を実行します。

--------------------
$ cd selenium-rc-tut
$ mvn install
--------------------

以下を実行し、Eclipse プロジェクトに必要なファイル (`.classpath`, `.project`) を生成します。

--------------------
$ mvn eclipse:eclipse
--------------------

Eclipse の `File` &raquo; `Import` メニューから、ウィザードに従って `selenium-rc-tut` ディレクトリーをインポートします。

`Package Explorer` に `selenium-rc-tut` プロジェクトが出来ていることを確認して下さい。

image:images/eclipse_rc_project_imported.png["",height=420]

テストコードの作成
~~~~~~~~~~~~~~~~~~

<<export_test_code>> でエクスポートしたテストコードをインポートし、それに編集を加えてテストコードを作成します。

まず、<<export_test_code>> でエクスポートした `SearchOnGoogleRCTestCase.java` を、
`Pacage Explorer` の `selenium-rc-tut` &raquo; `src/test/java` &raquo; `jp.co.s34.selenium` 上にドラッグ&amp;ドロップします。

ファイルをコピーするかリンクを作るか尋ねられますが、デフォルトの `Copy files`のまま `OK` をクリックします。

`SearchOnGoogleRCTestCase.java` をダブルクリックして、エディターで開きます。

* パッケージ名が正しくない
* Deprecated な API を使用している
* 使用しないクラスがインポートされている

パッケージ名の修正
^^^^^^^^^^^^^^^^^^

コンパイルエラーが発生しているのは、パッケージ名を定義している以下の箇所です。

[source,java]
------------------------------
package com.example.tests;
------------------------------

クイックフィックスアイコン
image:images/eclipse_quick_fix.png[""] をクリックし、
`Change package declaration to jp.co.s34.selenium` を選択します。

Deprecated な API の使用を許可する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

下記の行で image:images/eclipse_quick_fix.png[""] をクリックし、 `Add @SuppressWarnings deprecation to SearchOnGoogleRCTestCase` を選択します。

[source,java]
------------------------------
public class SearchOnGoogleRCTestCase extends SeleneseTestCase {
------------------------------

インポートするクラスの整理
^^^^^^^^^^^^^^^^^^^^^^^^^^

`Source` &raquo; `Organize Imports` メニューを選択します。

以上を修正すると、`SearchOnGoogleRCTestCase.java` は下のようになります。

[source,java]
.`SearchOnGoogleRCTestCase.java`
--------------------
package jp.co.s34.selenium;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.thoughtworks.selenium.DefaultSelenium;
import com.thoughtworks.selenium.SeleneseTestCase;

@SuppressWarnings("deprecation")
public class SearchOnGoogleRCTestCase extends SeleneseTestCase {
	@Before
	public void setUp() throws Exception {
		selenium = new DefaultSelenium("localhost", 4444, "*chrome", "http://www.google.co.jp/");
		selenium.start();
	}

	@Test
	public void testSearchOnGoogleRCTestCase() throws Exception {
		selenium.open("/");
		selenium.type("id=lst-ib", "株式会社エス・スリー・フォー");
		for (int second = 0;; second++) {
			if (second >= 60) fail("timeout");
			try { if (selenium.isElementPresent("css=em")) break; } catch (Exception e) {}
			Thread.sleep(1000);
		}

		selenium.click("css=em");
		selenium.waitForPageToLoad("30000");
	}

	@After
	public void tearDown() throws Exception {
		selenium.stop();
	}
}
--------------------

`File` &raquo; `Save` メニューを選択して、`SearchOnGoogleRCTestCase.java`
の変更を保存します。

テストコードの実行
~~~~~~~~~~~~~~~~~~

Selenium 1.0 (Remote Control) では、
クライアントであるテストコードを実行する前に、サーバーを起動する必要があります。

Remote Control サーバーの起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Run` &raquo; `Run Configurations...` メニューを選択します。

image:images/eclipse_run_configurations.png["",height=420]

左側のペインから `Java Application` を選択し、その状態で新規作成アイコン
image:images/eclipse_new_configuration.png[""] をクリックします。

以下のように、各項目に対して値を入力します。

[options="header",width="50%"]
|=====================================================
|項目        |値
|Name       |Selenium RC Server
|Project    |selenium-rc-tut
|Main class |org.openqa.selenium.server.SeleniumServer
|=====================================================

入力後、 `Apply` をクリックして設定を保存してから、 `Run` をクリックします。

しばらくして、 `Console` ビューに以下のようなログが表示されれば、サーバーの起動が完了となります。

image:images/eclipse_rc_server_started.png["",width=600]

[[selenium-rc-run-testcase]]
Remote Control クライアント (テストコード) の起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Package Explorer` の `selenium-rc-tut` &raquo; `src/test/java` &raquo;
`jp.co.s34.selenium` &raquo; `SearchOnGoogleRCTestCase.java` 上で右クリックし、
`Run As...` &raquo; `JUnit Test` メニューを選択します。

Firefox が起動し、テストが自動的に実行されることを確認します。

テスト終了後、`Console` ビューの 停止アイコン image:images/eclipse_terminate.png[""]
をクリックし、Remote Control サーバーを停止しておきます。

Selenium Grid
-------------

プロジェクトの作成
~~~~~~~~~~~~~~~~~~

ターミナルから下記を実行します。

--------------------
$ mvn archetype:generate \
> -DarchetypeArtifactId=maven-archetype-quickstart \
> -DarchetypeGroupId=org.apache.maven.archetypes \
> -DgroupId=jp.co.s34.selenium \
> -DartifactId=selenium-grid-tut -DinteractiveMode=false
--------------------

実行したディレクトリーに `selenium-grid-tut` というディレクトリーが生成されます。

`selenium-grid-tut/pom.xml` を任意のエディターで編集し、
<<selenium-rc-pom-xml-modification>> と同様に、以下の修正を加えます。

* `junit` のバージョン番号を 4.8.2 に変更する
* `selenium-java` への依存性について定義する `<dependency>` を追加する
* `selenium-server` への依存性について定義する `<dependency>` を追加する

以下を実行し、Eclipse プロジェクトに必要なファイル (`.classpath`, `.project`) を生成します。
footnote:[`mvn install` の実行は必要ありません。
プロジェクトの依存内容が <<selenium-rc>> のものと同一なので、
新たにインストールする JARファイルが無いためです。]

--------------------
$ cd selenium-grid-tut
$ mvn eclipse:eclipse
--------------------

Eclipse の `File` &raquo; `Import` メニューから、ウィザードに従って
`selenium-grid-tut` ディレクトリーをインポートします。

`Package Explorer` に `selenium-grid-tut` プロジェクトが出来ていることを確認して下さい。

image:images/eclipse_grid_project_imported.png["",height=420]

テストコードの作成
~~~~~~~~~~~~~~~~~~

<<webdriver-create-test>> で作成したテスト `SearchOnGoogleWDTestCase.java` をコピーし、
Selenium Grid で実行できるように、それに対して修正を加えます。

テストケースの複製
^^^^^^^^^^^^^^^^^^

`Pacage Explorer` の `webdriver-tut` &raquo; `src/test/java` &raquo;
`jp.co.s34.selenium` &raquo; `SearchOnGoogleWDTestCase.java` を、
`selenium-grid-tut` &raquo; `src/test/java` &raquo;
`jp.co.s34.selenium` へ、 `option` キーを押しながらドラッグ&amp;ドロップします。

image:images/eclipse_testcase_copied.png["",height=420]

`selenium-grid-tut` &raquo; `src/test/java` &raquo;
`jp.co.s34.selenium` &raquo; `SearchOnGoogleWDTestCase.java` を選択した状態で、
`Refactor` &raquo; `Rename...` メニューを選択します。

image:images/eclipse_rename_comp_unit.png[""]

`New name` を `SearchOnGoogleRemoteWDTestCase` とし、
他はデフォルトのままで `Finishi` をクリックします。

テストケースの修正
^^^^^^^^^^^^^^^^^^

`SearchOnGoogleRemoteWDTestCase.java` をダブルクリックしてエディターで開き、以下のように修正します。

[source,java]
.修正前
------------------------------
...
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class SearchOnGoogleRemoteWDTestCase {
...
	public void setUp() throws Exception {
		driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}
...
------------------------------

[source,java]
.修正後
------------------------------
...
import java.net.URL;                                     /* <1> */
...
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;   /* <1> */
import org.openqa.selenium.remote.RemoteWebDriver;       /* <1> */
...
public class SearchOnGoogleRemoteWDTestCase {
...
	public void setUp() throws Exception {
		DesiredCapabilities capability = DesiredCapabilities.firefox();  /* <2> */
		driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"),
				capability);                                     /* <3> */
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}
...
------------------------------

<1> 必要なクラスをインポートし、不要なインポートを削除します。
<2> Firefox を起動できるノード上でテストを実行するよう指定します
<3> Hub サーバーの URI と Node サーバーの capability を指定し、
    `RemoteWebDriver` のインスタンスを生成します。

テストコードの実行
~~~~~~~~~~~~~~~~~~

Hubサーバーの起動
^^^^^^^^^^^^^^^^^

`Run` &raquo; `Run Configurations...` メニューを選択します。

左側のペインから `Java Application` を選択し、その状態で新規作成アイコン
image:images/eclipse_new_configuration.png[""] をクリックします。

以下のように、各項目に対して値を入力します。

[options="header",width="50%"]
|================================================================
|タブ       |項目               |値
.3+|Main   |Name              |Selenium Grid Hub Server
           |Project           |selenium-grid-tut
           |Main class        |org.openqa.selenium.server.SeleniumServer
|Arguments |Program Arguments |-role hub
|================================================================

入力後、 `Apply` をクリックして設定を保存してから、 `Run` をクリックします。

しばらくして、 `Console` ビューに以下のようなログが表示されれば、サーバーの起動が完了となります。

image:images/eclipse_hub_server_started.png["",width=600]

WebDriver Node サーバーの起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Run` &raquo; `Run Configurations...` メニューを選択します。

左側のペインから `Java Application` を選択し、その状態で新規作成アイコン
image:images/eclipse_new_configuration.png[""] をクリックします。

以下のように、各項目に対して値を入力します。

[options="header",width="60%"]
|================================================================
|タブ       |項目               |値
.3+|Main   |Name              |Selenium Grid WebDriver Node Server
           |Project           |selenium-grid-tut
           |Main class        |org.openqa.selenium.server.SeleniumServer
|Arguments |Program Arguments |-role webdriver -hub http://localhost:4444/grid/register -port 5556
|================================================================

入力後、 `Apply` をクリックして設定を保存してから、 `Run` をクリックします。

しばらくして、 `Console` ビューに以下のようなログが表示されれば、サーバーの起動が完了となります。

image:images/eclipse_wd_node_server_started.png["",width=600]

Remote Control Node サーバーの起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Run` &raquo; `Run Configurations...` メニューを選択します。

左側のペインから `Java Application` を選択し、その状態で新規作成アイコン
image:images/eclipse_new_configuration.png[""] をクリックします。

以下のように、各項目に対して値を入力します。

[options="header",width="60%"]
|================================================================
|タブ       |項目               |値
.3+|Main   |Name              |Selenium Grid RC Node Server
           |Project           |selenium-grid-tut
           |Main class        |org.openqa.selenium.server.SeleniumServer
|Arguments |Program Arguments |-role rc -hub http://localhost:4444/grid/register -port 5555
|================================================================

入力後、 `Apply` をクリックして設定を保存してから、 `Run` をクリックします。

しばらくして、 `Console` ビューに以下のようなログが表示されれば、サーバーの起動が完了となります。

image:images/eclipse_rc_node_server_started.png["",width=600]

WebDriver クライアント (テストコード) の起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Package Explorer` の `selenium-grid-tut` &raquo; `src/test/java` &raquo;
`jp.co.s34.selenium` &raquo; `SearchOnGoogleRemoteWDTestCase.java` 上で右クリックし、
`Run As...` &raquo; `JUnit Test` メニューを選択します。

Firefox が起動し、テストが自動的に実行されることを確認します。

Remote Control クライアント (テストコード) の起動
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<<selenium-rc-run-testcase>> の手順に従って、 
テストケース `SearchOnGoogleRCTestCase` を実行します。

Firefox が起動し、テストが自動的に実行されることを確認します。

テスト終了後、`Console` ビューの 停止アイコン image:images/eclipse_terminate.png[""]
をクリックし、Remote Control Node サーバー、WebDriver Node サーバー、Hubサーバーを停止しておきます。

それぞれのコンソールは、image:images/eclipse_switch_console.png[""] で切り替えられます。